<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Episodes on Heavy Meta TV</title><link>https://heavymeta.tv/episodes/</link><description>Recent content in Episodes on Heavy Meta TV</description><generator>Hugo -- gohugo.io</generator><language>en-EN</language><atom:link href="https://heavymeta.tv/episodes/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic Editors</title><link>https://heavymeta.tv/episodes/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/3/</guid><description>You will continue further with your language definition that we started you started in the last episode. This time the focus is on making the language easier to use and behave like a text editor to meet the users expectations. The implementation is done with &amp;ldquo;vanilla&amp;rdquo; MPS and not third party libraries are used. To achieve this goal we will use the substitute menu and actions from MPS.</description></item><item><title>code generator basics</title><link>https://heavymeta.tv/episodes/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/9/</guid><description>This part introduces the basics of a code generator to Java, it also discusses design decision when building generators.</description></item><item><title>continue on code generator</title><link>https://heavymeta.tv/episodes/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/10/</guid><description>This part will continue to explain generators and looks some of the more advanced features e.g. how to use template switches for extensible generators.</description></item><item><title>Editors with Grammar Cells and Basic Type System</title><link>https://heavymeta.tv/episodes/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/4/</guid><description>After building the first editors for the expression language with vanilla MPS this video will introduce you to grammar cells which is part of the MPS Extensions. You will use grammar cells to rebuild the existing editor to be able to compare the two approaches. Though the further tutorials we will use grammar cells when possible because of it advantages over using MPS out of the box. This part will also explain you the limitations of grammar cells and give you example when to not use them.</description></item><item><title>Introduction to JetBrains Meta Programming System</title><link>https://heavymeta.tv/episodes/0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/0/</guid><description>You will get an overview about what the Meta Programming System by JetBrains is, what it is useful for, where its strengths are and how it compares to other implementation technologies of MPS. You will also get a short walk through of what others have build with MPS.</description></item><item><title>Introduction to Language Aspects</title><link>https://heavymeta.tv/episodes/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/1/</guid><description>In this Episode you will get an overview on how MPS separates the different concerns of implementing a language with in the language workbench with language aspects. We will cover all the aspects that MPS offers to implement a language and also take a look at examples for the ones that used the most.</description></item><item><title>more testing of our language and some new concepts</title><link>https://heavymeta.tv/episodes/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/8/</guid><description>This part details on editor testing and builds tests for common use cases in the editor. The second half introduces some of the other aspects of MPS to the language. You will explore the use cases of intentions, refactoring and actions. As a bonus you will use the MPS APIs to interact with your language meta model to dynamically retrieve the available concepts of your language.</description></item><item><title>More Type System for our Programming Language</title><link>https://heavymeta.tv/episodes/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/5/</guid><description>This part continues with the basics of the type system build in previous part. The main objective is to build a type system that is extensible and still maintainable. Special focus is on operation types that make build that type system for binary expression much easier. You will also introduce new type like strings and take a look at type inference.</description></item><item><title>Nested Scopes and Testing</title><link>https://heavymeta.tv/episodes/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/7/</guid><description>This part introduces nesting of scopes to allow shadowing names of variables and talks briefly about testing languages. For scoping some of the integrated scopes of MPS are explained the Hiding By Name Scope in particular. In language testing the node test aspect is covered extensively but editor tests are introduces briefly as well. With node tests the type system which was introduced over the previous two parts is tested for correct type calculation and error reporting.</description></item><item><title>Starting our first Language</title><link>https://heavymeta.tv/episodes/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/2/</guid><description>We start with an introduction to the language we would like to build and define some of the features that language will support which we will then implement over the course of the next episodes. You will learn how to create your first project and get stated with the initial definition of the language. For the language we will define basic editor and introduce how version control with MPS works.</description></item><item><title>Variable References and Scopes</title><link>https://heavymeta.tv/episodes/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heavymeta.tv/episodes/6/</guid><description>This part will introduce the concept of variable references and scopes. The focus is on simple scopes with no nesting and an introduction the different ways of implementing Scope in MPS including Scope Providers.</description></item></channel></rss>